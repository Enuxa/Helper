package Base;

import java.util.*;

class Noeud{
	private Noeud gauche, droite;
	private Object valeur;
	public boolean estFeuille (){
		return this.gauche == null && this.droite == null;
	}
	public Etiquette getEtiquette (){
		if (this.estFeuille ())
			return (Etiquette)this.valeur;
		else
			return null;
	}
	public String getOperateur (){
		if (this.estFeuille ())
			return null;
		else
			return (String)this.valeur;
	}
	public Noeud (String s){
		decomposer (s);
	}
	//	Décomposition d'une chaîne en tokens
	private String[] decomposer (String arg){
		String[] noms = Memoire.getNomsExpressions ();
		
		List<String> list = new ArrayList<String> ();
		String str = "", c = "";
		for (int i = 0; i < arg.length(); i++){
			if (arg.charAt(i) == ' ')
				continue;
			str += arg.charAt (i);
			
			//	On récupère le caractère suivant
			if (i + 1 < arg.length())
				c = Character.toString (arg.charAt (i + 1));
			else
				c = null;
			
			//	Si ce caractère est une parenthèse/opérateur
			if (estParenthese (str) || estOperateur (str)){
				list.add (str);
				str="";
			}else{
				int l = str.length ();
				String nom = null;
				
				//	On recherche le nom d'une ER en mémoire
				for (int j = 0; j < noms.length; j++){
					if (str.contains (noms[j])){
						l = str.indexOf (noms[j]);
						m = str.indexOf (noms[j]) + noms[j].length ();
						nom = noms[j];
						break;
					}
				}
				//	Si le prochain caractère en est un, si on reconnaît un nom d'ER à la fin de la chaîne courante ou si on atteint la fin de l'expression
				if (c == null || estParenthese (c) || estOperateur (c) || nom != null){
					for (int j = 0; j < l; j++){
						list.add (Character.toString (str.charAt (j)));
						if (j < str.length () - 1)
							list.add (".");
					}
					//	Si on a reconnu un nom d'ER
					if (nom != null){
						list.add (nom);
						if (m < str.length () - 1)
							list.add (".");
					}
					str = "";
				}
			}
		}
		
		return (String[])list.toArray (new String[list.size ()]);
	}
	private Noeud (String[] tokens){
	}
	public String toString (){
		return this.valeur.toString ();
	}
	private boolean estParenthese (String s){
		return s.equals ("(") || s.equals (")");
	}
	private boolean estOperateur (String s){
		return s.equals (".") || s.equals ("+") || s.equals ("*") || s.equals ("^");
	}
	private int getPriorite (String o){
		if (o.equals ("+"))
			return 1;
		else if (o.equals ("."))
			return 2;
		else if (o.equals ("*") || o.equals ("^"))
			return 3;
		else return 4;
	}
}
